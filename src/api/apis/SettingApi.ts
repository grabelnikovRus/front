/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  GetCatalogSettingsResponse,
  GetCatalogSettingsResponseFromJSON,
  GetCatalogSettingsResponseToJSON,
  GetCatalogSettingsResponseNew,
  GetCatalogSettingsResponseNewFromJSON,
  GetCatalogSettingsResponseNewToJSON,
  GetUserpanelSettingsResponse,
  GetUserpanelSettingsResponseFromJSON,
  GetUserpanelSettingsResponseToJSON,
} from '../models'

/**
 *
 */
export class SettingApi extends runtime.BaseAPI {
  /**
   * Получение настроек и значений для фильтров каталога
   */
  async getCatalogSettingsRaw(): Promise<runtime.ApiResponse<GetCatalogSettingsResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/settings-v1/catalog`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetCatalogSettingsResponseFromJSON(jsonValue),
    )
  }

  /**
   * Получение настроек и значений для фильтров каталога
   */
  async getCatalogSettings(): Promise<GetCatalogSettingsResponse> {
    const response = await this.getCatalogSettingsRaw()
    return await response.value()
  }

  /**
   * Получение настроек и значений для фильтров каталога
   */
  async getCatalogSettingsNewRaw(): Promise<runtime.ApiResponse<GetCatalogSettingsResponseNew>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/catalog-settings-v1`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetCatalogSettingsResponseNewFromJSON(jsonValue),
    )
  }

  /**
   * Получение настроек и значений для фильтров каталога
   */
  async getCatalogSettingsNew(): Promise<GetCatalogSettingsResponseNew> {
    const response = await this.getCatalogSettingsNewRaw()
    return await response.value()
  }

  /**
   * Получение настроек для формы входа
   */
  async getUserpanelSettingsRaw(): Promise<runtime.ApiResponse<GetUserpanelSettingsResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/settings-v1/userpanel`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUserpanelSettingsResponseFromJSON(jsonValue),
    )
  }

  /**
   * Получение настроек для формы входа
   */
  async getUserpanelSettings(): Promise<GetUserpanelSettingsResponse> {
    const response = await this.getUserpanelSettingsRaw()
    return await response.value()
  }
}
