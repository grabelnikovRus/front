/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  EmptyBody,
  EmptyBodyFromJSON,
  EmptyBodyToJSON,
  GetProfileResponse,
  GetProfileResponseFromJSON,
  GetProfileResponseToJSON,
  LogInResponse,
  LogInResponseFromJSON,
  LogInResponseToJSON,
  SignUpResponse,
  SignUpResponseFromJSON,
  SignUpResponseToJSON,
  UserpanelEnterWithCheckListRequest,
  UserpanelEnterWithCheckListRequestFromJSON,
  UserpanelEnterWithCheckListRequestToJSON,
  UserpanelLogInRequest,
  UserpanelLogInRequestFromJSON,
  UserpanelLogInRequestToJSON,
  UserpanelSignInRequest,
  UserpanelSignInRequestFromJSON,
  UserpanelSignInRequestToJSON,
  UserpanelSignUpRequest,
  UserpanelSignUpRequestFromJSON,
  UserpanelSignUpRequestToJSON,
} from '../models'

export interface EnterWithCheckListRequest {
  userpanelEnterWithCheckListRequest: UserpanelEnterWithCheckListRequest
}

export interface LogInRequest {
  userpanelLogInRequest: UserpanelLogInRequest
}

export interface SignInRequest {
  userpanelSignInRequest: UserpanelSignInRequest
}

export interface SignUpRequest {
  userpanelSignUpRequest: UserpanelSignUpRequest
}

/**
 *
 */
export class UserpanelApi extends runtime.BaseAPI {
  /**
   * В случае, если пользователь уже зарегистрирован, происходит вход. Иначе - регистрация
   * Вход пользователя в ЛК с передачей чек-листа сделки
   */
  async enterWithCheckListRaw(
    requestParameters: EnterWithCheckListRequest,
  ): Promise<runtime.ApiResponse<SignUpResponse>> {
    if (
      requestParameters.userpanelEnterWithCheckListRequest === null ||
      requestParameters.userpanelEnterWithCheckListRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'userpanelEnterWithCheckListRequest',
        'Required parameter requestParameters.userpanelEnterWithCheckListRequest was null or undefined when calling enterWithCheckList.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/userpanel-v1/enter-with-check-list`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UserpanelEnterWithCheckListRequestToJSON(
        requestParameters.userpanelEnterWithCheckListRequest,
      ),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => SignUpResponseFromJSON(jsonValue))
  }

  /**
   * В случае, если пользователь уже зарегистрирован, происходит вход. Иначе - регистрация
   * Вход пользователя в ЛК с передачей чек-листа сделки
   */
  async enterWithCheckList(
    userpanelEnterWithCheckListRequest: UserpanelEnterWithCheckListRequest,
  ): Promise<SignUpResponse> {
    const response = await this.enterWithCheckListRaw({
      userpanelEnterWithCheckListRequest: userpanelEnterWithCheckListRequest,
    })
    return await response.value()
  }

  /**
   * Токен авторизации, полученный в `/login`, должен быть передан в заголовке `Authorization: Bearer {token}`
   * Информация о профиле пользователя
   */
  async getProfileRaw(): Promise<runtime.ApiResponse<GetProfileResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken
      const tokenString = await token('userpanelBearerAuth', [])

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`
      }
    }
    const response = await this.request({
      path: `/userpanel-v1/profile`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetProfileResponseFromJSON(jsonValue),
    )
  }

  /**
   * Токен авторизации, полученный в `/login`, должен быть передан в заголовке `Authorization: Bearer {token}`
   * Информация о профиле пользователя
   */
  async getProfile(): Promise<GetProfileResponse> {
    const response = await this.getProfileRaw()
    return await response.value()
  }

  /**
   * Аутентификация пользователя по коду из смс
   */
  async logInRaw(requestParameters: LogInRequest): Promise<runtime.ApiResponse<LogInResponse>> {
    if (
      requestParameters.userpanelLogInRequest === null ||
      requestParameters.userpanelLogInRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'userpanelLogInRequest',
        'Required parameter requestParameters.userpanelLogInRequest was null or undefined when calling logIn.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/userpanel-v1/login`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UserpanelLogInRequestToJSON(requestParameters.userpanelLogInRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => LogInResponseFromJSON(jsonValue))
  }

  /**
   * Аутентификация пользователя по коду из смс
   */
  async logIn(userpanelLogInRequest: UserpanelLogInRequest): Promise<LogInResponse> {
    const response = await this.logInRaw({ userpanelLogInRequest: userpanelLogInRequest })
    return await response.value()
  }

  /**
   * Вход зарегистрированного пользователя в ЛК
   */
  async signInRaw(
    requestParameters: SignInRequest,
  ): Promise<runtime.ApiResponse<SignUpResponse>> {
    if (
      requestParameters.userpanelSignInRequest === null ||
      requestParameters.userpanelSignInRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'userpanelSignInRequest',
        'Required parameter requestParameters.userpanelSignInRequest was null or undefined when calling signIn.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/userpanel-v1/signin`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UserpanelSignInRequestToJSON(requestParameters.userpanelSignInRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => SignUpResponseFromJSON(jsonValue))
  }

  /**
   * Вход зарегистрированного пользователя в ЛК
   */
  async signIn(userpanelSignInRequest: UserpanelSignInRequest): Promise<SignUpResponse> {
    const response = await this.signInRaw({ userpanelSignInRequest: userpanelSignInRequest })
    return await response.value()
  }

  /**
   * Регистрация пользователя в ЛК
   */
  async signUpRaw(
    requestParameters: SignUpRequest,
  ): Promise<runtime.ApiResponse<SignUpResponse>> {
    if (
      requestParameters.userpanelSignUpRequest === null ||
      requestParameters.userpanelSignUpRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'userpanelSignUpRequest',
        'Required parameter requestParameters.userpanelSignUpRequest was null or undefined when calling signUp.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/userpanel-v1/signup`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: UserpanelSignUpRequestToJSON(requestParameters.userpanelSignUpRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => SignUpResponseFromJSON(jsonValue))
  }

  /**
   * Регистрация пользователя в ЛК
   */
  async signUp(userpanelSignUpRequest: UserpanelSignUpRequest): Promise<SignUpResponse> {
    const response = await this.signUpRaw({ userpanelSignUpRequest: userpanelSignUpRequest })
    return await response.value()
  }
}
