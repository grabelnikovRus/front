/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ComplaintVerifyRequest,
  ComplaintVerifyRequestFromJSON,
  ComplaintVerifyRequestToJSON,
  CreateLeadRequest,
  CreateLeadRequestFromJSON,
  CreateLeadRequestToJSON,
  CreateLeadResponse,
  CreateLeadResponseFromJSON,
  CreateLeadResponseToJSON,
  EmptyBody,
  EmptyBodyFromJSON,
  EmptyBodyToJSON,
  VerifyComplaintResponse,
  VerifyComplaintResponseFromJSON,
  VerifyComplaintResponseToJSON,
} from '../models'

export interface CreateLeadOperationRequest {
  createLeadRequest: CreateLeadRequest
}

export interface VerifyLeadRequest {
  id: number
  complaintVerifyRequest: ComplaintVerifyRequest
}

/**
 *
 */
export class LeadApi extends runtime.BaseAPI {
  /**
   * Сохранение заявки из каталога
   */
  async createLeadRaw(
    requestParameters: CreateLeadOperationRequest,
  ): Promise<runtime.ApiResponse<CreateLeadResponse>> {
    if (
      requestParameters.createLeadRequest === null ||
      requestParameters.createLeadRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'createLeadRequest',
        'Required parameter requestParameters.createLeadRequest was null or undefined when calling createLead.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/lead-v2/create`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateLeadRequestToJSON(requestParameters.createLeadRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateLeadResponseFromJSON(jsonValue),
    )
  }

  /**
   * Сохранение заявки из каталога
   */
  async createLead(createLeadRequest: CreateLeadRequest): Promise<CreateLeadResponse> {
    const response = await this.createLeadRaw({ createLeadRequest: createLeadRequest })
    return await response.value()
  }

  /**
   * Проверка номера телефона в заявке из каталога
   */
  async verifyLeadRaw(
    requestParameters: VerifyLeadRequest,
  ): Promise<runtime.ApiResponse<VerifyComplaintResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling verifyLead.',
      )
    }

    if (
      requestParameters.complaintVerifyRequest === null ||
      requestParameters.complaintVerifyRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'complaintVerifyRequest',
        'Required parameter requestParameters.complaintVerifyRequest was null or undefined when calling verifyLead.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/lead-v2/{id}/verify`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ComplaintVerifyRequestToJSON(requestParameters.complaintVerifyRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VerifyComplaintResponseFromJSON(jsonValue),
    )
  }

  /**
   * Проверка номера телефона в заявке из каталога
   */
  async verifyLead(
    id: number,
    complaintVerifyRequest: ComplaintVerifyRequest,
  ): Promise<VerifyComplaintResponse> {
    const response = await this.verifyLeadRaw({
      id: id,
      complaintVerifyRequest: complaintVerifyRequest,
    })
    return await response.value()
  }
}
