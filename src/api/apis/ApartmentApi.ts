/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ApartmentCountRequest,
  ApartmentCountRequestFromJSON,
  ApartmentCountRequestToJSON,
  ApartmentSearchRequestV1,
  ApartmentSearchRequestV1FromJSON,
  ApartmentSearchRequestV1ToJSON,
  CountApartmentsResponse,
  CountApartmentsResponseFromJSON,
  CountApartmentsResponseToJSON,
  EmptyBody,
  EmptyBodyFromJSON,
  EmptyBodyToJSON,
  GetApartmentLoanResponse,
  GetApartmentLoanResponseFromJSON,
  GetApartmentLoanResponseToJSON,
  GetApartmentMetaResponse,
  GetApartmentMetaResponseFromJSON,
  GetApartmentMetaResponseToJSON,
  GetApartmentResponse,
  GetApartmentResponseFromJSON,
  GetApartmentResponseToJSON,
  Promo,
  PromoFromJSON,
  PromoToJSON,
  SearchApartmentsResponseV1,
  SearchApartmentsResponseV1FromJSON,
  SearchApartmentsResponseV1ToJSON,
  SortBy,
  SortByFromJSON,
  SortByToJSON,
  SortOrder,
  SortOrderFromJSON,
  SortOrderToJSON,
} from '../models'

export interface ApartmentsSimilarV1IdGetRequest {
  id: number
  limit: number
  promo?: Promo
}

export interface CountApartmentsRequest {
  apartmentCountRequest: ApartmentCountRequest
}

export interface GetApartmentRequest {
  id: number
  promo?: Promo
}

export interface GetApartmentLoanRequest {
  id: number
  amount: number
  duration: number
  promo?: Promo
}

export interface GetApartmentMetaRequest {
  id: number
}

export interface SearchApartmentsV1Request {
  page: number
  perPage: number
  apartmentSearchRequestV1: ApartmentSearchRequestV1
  sortBy?: SortBy
  sortOrder?: SortOrder
  promo?: Promo
}

/**
 *
 */
export class ApartmentApi extends runtime.BaseAPI {
  /**
   * Поиск похожих квартир в радиусе 3км
   */
  async apartmentsSimilarV1IdGetRaw(
    requestParameters: ApartmentsSimilarV1IdGetRequest,
  ): Promise<runtime.ApiResponse<SearchApartmentsResponseV1>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling apartmentsSimilarV1IdGet.',
      )
    }

    if (requestParameters.limit === null || requestParameters.limit === undefined) {
      throw new runtime.RequiredError(
        'limit',
        'Required parameter requestParameters.limit was null or undefined when calling apartmentsSimilarV1IdGet.',
      )
    }

    const queryParameters: any = {}

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    if (requestParameters.promo !== undefined) {
      queryParameters['promo'] = requestParameters.promo
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apartments-similar-v1/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchApartmentsResponseV1FromJSON(jsonValue),
    )
  }

  /**
   * Поиск похожих квартир в радиусе 3км
   */
  async apartmentsSimilarV1IdGet(
    id: number,
    limit: number,
    promo?: Promo,
  ): Promise<SearchApartmentsResponseV1> {
    const response = await this.apartmentsSimilarV1IdGetRaw({
      id: id,
      limit: limit,
      promo: promo,
    })
    return await response.value()
  }

  /**
   * Подсчёт количества квартир
   */
  async countApartmentsRaw(
    requestParameters: CountApartmentsRequest,
  ): Promise<runtime.ApiResponse<CountApartmentsResponse>> {
    if (
      requestParameters.apartmentCountRequest === null ||
      requestParameters.apartmentCountRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'apartmentCountRequest',
        'Required parameter requestParameters.apartmentCountRequest was null or undefined when calling countApartments.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/apartments-count-v1`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApartmentCountRequestToJSON(requestParameters.apartmentCountRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CountApartmentsResponseFromJSON(jsonValue),
    )
  }

  /**
   * Подсчёт количества квартир
   */
  async countApartments(
    apartmentCountRequest: ApartmentCountRequest,
  ): Promise<CountApartmentsResponse> {
    const response = await this.countApartmentsRaw({
      apartmentCountRequest: apartmentCountRequest,
    })
    return await response.value()
  }

  /**
   * Получение квартиры по amoId без нормализации null к {}, добавился 404 ответ
   */
  async getApartmentRaw(
    requestParameters: GetApartmentRequest,
  ): Promise<runtime.ApiResponse<GetApartmentResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getApartment.',
      )
    }

    const queryParameters: any = {}

    if (requestParameters.promo !== undefined) {
      queryParameters['promo'] = requestParameters.promo
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apartments-v2/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetApartmentResponseFromJSON(jsonValue),
    )
  }

  /**
   * Получение квартиры по amoId без нормализации null к {}, добавился 404 ответ
   */
  async getApartment(id: number, promo?: Promo): Promise<GetApartmentResponse> {
    const response = await this.getApartmentRaw({ id: id, promo: promo })
    return await response.value()
  }

  /**
   * Расчет платежа по ипотеке
   */
  async getApartmentLoanRaw(
    requestParameters: GetApartmentLoanRequest,
  ): Promise<runtime.ApiResponse<GetApartmentLoanResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getApartmentLoan.',
      )
    }

    if (requestParameters.amount === null || requestParameters.amount === undefined) {
      throw new runtime.RequiredError(
        'amount',
        'Required parameter requestParameters.amount was null or undefined when calling getApartmentLoan.',
      )
    }

    if (requestParameters.duration === null || requestParameters.duration === undefined) {
      throw new runtime.RequiredError(
        'duration',
        'Required parameter requestParameters.duration was null or undefined when calling getApartmentLoan.',
      )
    }

    const queryParameters: any = {}

    if (requestParameters.amount !== undefined) {
      queryParameters['amount'] = requestParameters.amount
    }

    if (requestParameters.duration !== undefined) {
      queryParameters['duration'] = requestParameters.duration
    }

    if (requestParameters.promo !== undefined) {
      queryParameters['promo'] = requestParameters.promo
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apartments-v2/{id}/loan`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetApartmentLoanResponseFromJSON(jsonValue),
    )
  }

  /**
   * Расчет платежа по ипотеке
   */
  async getApartmentLoan(
    id: number,
    amount: number,
    duration: number,
    promo?: Promo,
  ): Promise<GetApartmentLoanResponse> {
    const response = await this.getApartmentLoanRaw({
      id: id,
      amount: amount,
      duration: duration,
      promo: promo,
    })
    return await response.value()
  }

  /**
   * Получение мета-данных квартиры, добавился 404 ответ
   */
  async getApartmentMetaRaw(
    requestParameters: GetApartmentMetaRequest,
  ): Promise<runtime.ApiResponse<GetApartmentMetaResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getApartmentMeta.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/apartments-v2/{id}/meta`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetApartmentMetaResponseFromJSON(jsonValue),
    )
  }

  /**
   * Получение мета-данных квартиры, добавился 404 ответ
   */
  async getApartmentMeta(id: number): Promise<GetApartmentMetaResponse> {
    const response = await this.getApartmentMetaRaw({ id: id })
    return await response.value()
  }

  /**
   * Поиск квартир
   */
  async searchApartmentsV1Raw(
    requestParameters: SearchApartmentsV1Request,
  ): Promise<runtime.ApiResponse<SearchApartmentsResponseV1>> {
    if (requestParameters.page === null || requestParameters.page === undefined) {
      throw new runtime.RequiredError(
        'page',
        'Required parameter requestParameters.page was null or undefined when calling searchApartmentsV1.',
      )
    }

    if (requestParameters.perPage === null || requestParameters.perPage === undefined) {
      throw new runtime.RequiredError(
        'perPage',
        'Required parameter requestParameters.perPage was null or undefined when calling searchApartmentsV1.',
      )
    }

    if (
      requestParameters.apartmentSearchRequestV1 === null ||
      requestParameters.apartmentSearchRequestV1 === undefined
    ) {
      throw new runtime.RequiredError(
        'apartmentSearchRequestV1',
        'Required parameter requestParameters.apartmentSearchRequestV1 was null or undefined when calling searchApartmentsV1.',
      )
    }

    const queryParameters: any = {}

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page
    }

    if (requestParameters.perPage !== undefined) {
      queryParameters['perPage'] = requestParameters.perPage
    }

    if (requestParameters.sortBy !== undefined) {
      queryParameters['sortBy'] = requestParameters.sortBy
    }

    if (requestParameters.sortOrder !== undefined) {
      queryParameters['sortOrder'] = requestParameters.sortOrder
    }

    if (requestParameters.promo !== undefined) {
      queryParameters['promo'] = requestParameters.promo
    }

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/apartments-search-v1`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ApartmentSearchRequestV1ToJSON(requestParameters.apartmentSearchRequestV1),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SearchApartmentsResponseV1FromJSON(jsonValue),
    )
  }

  /**
   * Поиск квартир
   */
  async searchApartmentsV1(
    page: number,
    perPage: number,
    apartmentSearchRequestV1: ApartmentSearchRequestV1,
    sortBy?: SortBy,
    sortOrder?: SortOrder,
    promo?: Promo,
  ): Promise<SearchApartmentsResponseV1> {
    const response = await this.searchApartmentsV1Raw({
      page: page,
      perPage: perPage,
      apartmentSearchRequestV1: apartmentSearchRequestV1,
      sortBy: sortBy,
      sortOrder: sortOrder,
      promo: promo,
    })
    return await response.value()
  }
}
