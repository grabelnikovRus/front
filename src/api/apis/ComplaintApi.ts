/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  ComplaintCreateRequest,
  ComplaintCreateRequestFromJSON,
  ComplaintCreateRequestToJSON,
  ComplaintVerifyRequest,
  ComplaintVerifyRequestFromJSON,
  ComplaintVerifyRequestToJSON,
  CreateComplaintResponse,
  CreateComplaintResponseFromJSON,
  CreateComplaintResponseToJSON,
  EmptyBody,
  EmptyBodyFromJSON,
  EmptyBodyToJSON,
  VerifyComplaintResponse,
  VerifyComplaintResponseFromJSON,
  VerifyComplaintResponseToJSON,
} from '../models'

export interface CreateComplaintRequest {
  complaintCreateRequest: ComplaintCreateRequest
}

export interface VerifyComplaintRequest {
  id: number
  complaintVerifyRequest: ComplaintVerifyRequest
}

/**
 *
 */
export class ComplaintApi extends runtime.BaseAPI {
  /**
   * Отправка жалобы
   */
  async createComplaintRaw(
    requestParameters: CreateComplaintRequest,
  ): Promise<runtime.ApiResponse<CreateComplaintResponse>> {
    if (
      requestParameters.complaintCreateRequest === null ||
      requestParameters.complaintCreateRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'complaintCreateRequest',
        'Required parameter requestParameters.complaintCreateRequest was null or undefined when calling createComplaint.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/complaints-v1`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ComplaintCreateRequestToJSON(requestParameters.complaintCreateRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateComplaintResponseFromJSON(jsonValue),
    )
  }

  /**
   * Отправка жалобы
   */
  async createComplaint(
    complaintCreateRequest: ComplaintCreateRequest,
  ): Promise<CreateComplaintResponse> {
    const response = await this.createComplaintRaw({
      complaintCreateRequest: complaintCreateRequest,
    })
    return await response.value()
  }

  /**
   * Проверка номера телефона при создании жалобы
   */
  async verifyComplaintRaw(
    requestParameters: VerifyComplaintRequest,
  ): Promise<runtime.ApiResponse<VerifyComplaintResponse>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling verifyComplaint.',
      )
    }

    if (
      requestParameters.complaintVerifyRequest === null ||
      requestParameters.complaintVerifyRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'complaintVerifyRequest',
        'Required parameter requestParameters.complaintVerifyRequest was null or undefined when calling verifyComplaint.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request({
      path: `/complaints-v1/{id}/verify`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id)),
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: ComplaintVerifyRequestToJSON(requestParameters.complaintVerifyRequest),
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      VerifyComplaintResponseFromJSON(jsonValue),
    )
  }

  /**
   * Проверка номера телефона при создании жалобы
   */
  async verifyComplaint(
    id: number,
    complaintVerifyRequest: ComplaintVerifyRequest,
  ): Promise<VerifyComplaintResponse> {
    const response = await this.verifyComplaintRaw({
      id: id,
      complaintVerifyRequest: complaintVerifyRequest,
    })
    return await response.value()
  }
}
