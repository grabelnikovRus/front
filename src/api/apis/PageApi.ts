/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
  EmptyBody,
  EmptyBodyFromJSON,
  EmptyBodyToJSON,
  GetPageResponse,
  GetPageResponseFromJSON,
  GetPageResponseToJSON,
  GetPagesResponse,
  GetPagesResponseFromJSON,
  GetPagesResponseToJSON,
} from '../models'

export interface GetPageRequest {
  slug: string
}

/**
 *
 */
export class PageApi extends runtime.BaseAPI {
  /**
   * Получение информации о странице и её виджетах, добавился 404 ответ
   */
  async getPageRaw(
    requestParameters: GetPageRequest,
  ): Promise<runtime.ApiResponse<GetPageResponse>> {
    if (requestParameters.slug === null || requestParameters.slug === undefined) {
      throw new runtime.RequiredError(
        'slug',
        'Required parameter requestParameters.slug was null or undefined when calling getPage.',
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/pages-v2/{slug}`.replace(
        `{${'slug'}}`,
        encodeURIComponent(String(requestParameters.slug)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetPageResponseFromJSON(jsonValue),
    )
  }

  /**
   * Получение информации о странице и её виджетах, добавился 404 ответ
   */
  async getPage(slug: string): Promise<GetPageResponse> {
    const response = await this.getPageRaw({ slug: slug })
    return await response.value()
  }

  /**
   * Получение списка страниц сайта
   */
  async getPagesRaw(): Promise<runtime.ApiResponse<GetPagesResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/pages-v1`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetPagesResponseFromJSON(jsonValue),
    )
  }

  /**
   * Получение списка страниц сайта
   */
  async getPages(): Promise<GetPagesResponse> {
    const response = await this.getPagesRaw()
    return await response.value()
  }
}
