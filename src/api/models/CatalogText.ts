/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  ValidationMessages,
  ValidationMessagesFromJSON,
  ValidationMessagesFromJSONTyped,
  ValidationMessagesToJSON,
} from './'

/**
 *
 * @export
 * @interface CatalogText
 */
export interface CatalogText {
  /**
   *
   * @type {string}
   * @memberof CatalogText
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof CatalogText
   */
  type: CatalogTextTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof CatalogText
   */
  required: boolean
  /**
   *
   * @type {string}
   * @memberof CatalogText
   */
  _default: string | null
  /**
   *
   * @type {number}
   * @memberof CatalogText
   */
  minlength: number
  /**
   *
   * @type {number}
   * @memberof CatalogText
   */
  maxlength: number
  /**
   *
   * @type {string}
   * @memberof CatalogText
   */
  pattern: string
  /**
   *
   * @type {string}
   * @memberof CatalogText
   */
  regexp: string | null
  /**
   *
   * @type {ValidationMessages}
   * @memberof CatalogText
   */
  messages?: ValidationMessages
}

/**
 * @export
 * @enum {string}
 */
export enum CatalogTextTypeEnum {
  Text = 'text',
}

export function CatalogTextFromJSON(json: any): CatalogText {
  return CatalogTextFromJSONTyped(json, false)
}

export function CatalogTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): CatalogText {
  if (json === undefined || json === null) {
    return json
  }
  return {
    title: !exists(json, 'title') ? undefined : json['title'],
    type: json['type'],
    required: json['required'],
    _default: json['default'],
    minlength: json['minlength'],
    maxlength: json['maxlength'],
    pattern: json['pattern'],
    regexp: json['regexp'],
    messages: !exists(json, 'messages')
      ? undefined
      : ValidationMessagesFromJSON(json['messages']),
  }
}

export function CatalogTextToJSON(value?: CatalogText | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    title: value.title,
    type: value.type,
    required: value.required,
    default: value._default,
    minlength: value.minlength,
    maxlength: value.maxlength,
    pattern: value.pattern,
    regexp: value.regexp,
    messages: ValidationMessagesToJSON(value.messages),
  }
}
