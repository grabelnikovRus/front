/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  WidgetFieldImage,
  WidgetFieldOptionsMultiple,
  WidgetFieldPdf,
  WidgetFieldStack,
  WidgetFieldText,
  WidgetFieldImageFromJSONTyped,
  WidgetFieldImageToJSON,
  WidgetFieldOptionsMultipleFromJSONTyped,
  WidgetFieldOptionsMultipleToJSON,
  WidgetFieldPdfFromJSONTyped,
  WidgetFieldPdfToJSON,
  WidgetFieldStackFromJSONTyped,
  WidgetFieldStackToJSON,
  WidgetFieldTextFromJSONTyped,
  WidgetFieldTextToJSON,
} from './'

/**
 * @type WidgetFields
 *
 * @export
 */
export type WidgetFields =
  | ({ widgetType: 'image' } & WidgetFieldImage)
  | ({ widgetType: 'options-multiple' } & WidgetFieldOptionsMultiple)
  | ({ widgetType: 'pdf' } & WidgetFieldPdf)
  | ({ widgetType: 'stack' } & WidgetFieldStack)
  | ({ widgetType: 'text' } & WidgetFieldText)

export function WidgetFieldsFromJSON(json: any): WidgetFields {
  return WidgetFieldsFromJSONTyped(json, false)
}

export function WidgetFieldsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WidgetFields {
  if (json === undefined || json === null) {
    return json
  }
  switch (json['widgetType']) {
    case 'image':
      return { ...WidgetFieldImageFromJSONTyped(json, true), widgetType: 'image' }
    case 'options-multiple':
      return {
        ...WidgetFieldOptionsMultipleFromJSONTyped(json, true),
        widgetType: 'options-multiple',
      }
    case 'pdf':
      return { ...WidgetFieldPdfFromJSONTyped(json, true), widgetType: 'pdf' }
    case 'stack':
      return { ...WidgetFieldStackFromJSONTyped(json, true), widgetType: 'stack' }
    case 'text':
      return { ...WidgetFieldTextFromJSONTyped(json, true), widgetType: 'text' }
    default:
      throw new Error(`No variant of WidgetFields exists with 'widgetType=${json['widgetType']}'`)
  }
}

export function WidgetFieldsToJSON(value?: WidgetFields | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  switch (value['widgetType']) {
    case 'image':
      return WidgetFieldImageToJSON(value)
    case 'options-multiple':
      return WidgetFieldOptionsMultipleToJSON(value)
    case 'pdf':
      return WidgetFieldPdfToJSON(value)
    case 'stack':
      return WidgetFieldStackToJSON(value)
    case 'text':
      return WidgetFieldTextToJSON(value)
    default:
      throw new Error(
        `No variant of WidgetFields exists with 'widgetType=${value['widgetType']}'`,
      )
  }
}
