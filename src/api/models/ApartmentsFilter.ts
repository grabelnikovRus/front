/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  ApartmentsFilters,
  ApartmentsFiltersFromJSON,
  ApartmentsFiltersFromJSONTyped,
  ApartmentsFiltersToJSON,
  ApartmentsFiltersBoundingBox,
  ApartmentsFiltersBoundingBoxFromJSON,
  ApartmentsFiltersBoundingBoxFromJSONTyped,
  ApartmentsFiltersBoundingBoxToJSON,
  ApartmentsFiltersToponym,
  ApartmentsFiltersToponymFromJSON,
  ApartmentsFiltersToponymFromJSONTyped,
  ApartmentsFiltersToponymToJSON,
  ApartmentsSorts,
  ApartmentsSortsFromJSON,
  ApartmentsSortsFromJSONTyped,
  ApartmentsSortsToJSON,
  SortBy,
  SortByFromJSON,
  SortByFromJSONTyped,
  SortByToJSON,
  SortOrder,
  SortOrderFromJSON,
  SortOrderFromJSONTyped,
  SortOrderToJSON,
} from './'

/**
 *
 * @export
 * @interface ApartmentsFilter
 */
export interface ApartmentsFilter {
  /**
   * Адрес. Ищет плохо, вместо адреса стоит лучше использовать toponym
   * @type {string}
   * @memberof ApartmentsFilter
   */
  address?: string
  /**
   *
   * @type {string}
   * @memberof ApartmentsFilter
   */
  city?: string | null
  /**
   * Топоним. Формат Яндекс гео. Если передать топоним, то фильтр Адрес игнорируется
   * @type {Array<ApartmentsFiltersToponym>}
   * @memberof ApartmentsFilter
   */
  toponym?: Array<ApartmentsFiltersToponym>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  roominess?: Array<string>
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  priceRubMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  priceRubMax?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  fullAreaMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  fullAreaMax?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  kitchensAreaMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  kitchensAreaMax?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  livingAreaMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  livingAreaMax?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  buildingFloorCountMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  buildingFloorCountMax?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  floorNumberMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  floorNumberMax?: number
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  buildingCeilingHeight?: Array<ApartmentsFilterBuildingCeilingHeightEnum>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  housingTypes?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  saleTypes?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  decorationTypes?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  buildingTypes?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  windowViewTypes?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  buildingParkingTypes?: Array<string>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  wcsType?: Array<ApartmentsFilterWcsTypeEnum>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  elevatorType?: Array<ApartmentsFilterElevatorTypeEnum>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  balconyType?: Array<ApartmentsFilterBalconyTypeEnum>
  /**
   *
   * @type {Array<string>}
   * @memberof ApartmentsFilter
   */
  buildingGarbageChute?: Array<ApartmentsFilterBuildingGarbageChuteEnum>
  /**
   * Фильтр по id квартир
   * @type {Array<number>}
   * @memberof ApartmentsFilter
   */
  apartments?: Array<number>
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  loanRateMin?: number
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  loanRateMax?: number
  /**
   *
   * @type {ApartmentsFiltersBoundingBox}
   * @memberof ApartmentsFilter
   */
  boundingBox?: ApartmentsFiltersBoundingBox
  /**
   *
   * @type {number}
   * @memberof ApartmentsFilter
   */
  page?: number
  /**
   *
   * @type {SortBy}
   * @memberof ApartmentsFilter
   */
  sortBy?: SortBy
  /**
   *
   * @type {SortOrder}
   * @memberof ApartmentsFilter
   */
  sortOrder?: SortOrder
}

/**
 * @export
 * @enum {string}
 */
export enum ApartmentsFilterBuildingCeilingHeightEnum {
  NoMatter = 'no-matter',
  _250 = '>=250',
  _270 = '>=270',
  _300 = '>=300',
  _350 = '>=350',
  _400 = '>=400',
}
/**
 * @export
 * @enum {string}
 */
export enum ApartmentsFilterWcsTypeEnum {
  NoMatter = 'no-matter',
  Combined = 'combined',
  Separate = 'separate',
}
/**
 * @export
 * @enum {string}
 */
export enum ApartmentsFilterElevatorTypeEnum {
  NoMatter = 'no-matter',
  Any = 'any',
  Freight = 'freight',
}
/**
 * @export
 * @enum {string}
 */
export enum ApartmentsFilterBalconyTypeEnum {
  NoMatter = 'no-matter',
  Loggia = 'loggia',
  Balcony = 'balcony',
}
/**
 * @export
 * @enum {string}
 */
export enum ApartmentsFilterBuildingGarbageChuteEnum {
  NoMatter = 'no-matter',
  Yes = 'yes',
  No = 'no',
}

export function ApartmentsFilterFromJSON(json: any): ApartmentsFilter {
  return ApartmentsFilterFromJSONTyped(json, false)
}

export function ApartmentsFilterFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ApartmentsFilter {
  if (json === undefined || json === null) {
    return json
  }
  return {
    address: !exists(json, 'address') ? undefined : json['address'],
    city: !exists(json, 'city') ? undefined : json['city'],
    toponym: !exists(json, 'toponym')
      ? undefined
      : (json['toponym'] as Array<any>).map(ApartmentsFiltersToponymFromJSON),
    roominess: !exists(json, 'roominess') ? undefined : json['roominess'],
    priceRubMin: !exists(json, 'priceRubMin') ? undefined : json['priceRubMin'],
    priceRubMax: !exists(json, 'priceRubMax') ? undefined : json['priceRubMax'],
    fullAreaMin: !exists(json, 'fullAreaMin') ? undefined : json['fullAreaMin'],
    fullAreaMax: !exists(json, 'fullAreaMax') ? undefined : json['fullAreaMax'],
    kitchensAreaMin: !exists(json, 'kitchensAreaMin') ? undefined : json['kitchensAreaMin'],
    kitchensAreaMax: !exists(json, 'kitchensAreaMax') ? undefined : json['kitchensAreaMax'],
    livingAreaMin: !exists(json, 'livingAreaMin') ? undefined : json['livingAreaMin'],
    livingAreaMax: !exists(json, 'livingAreaMax') ? undefined : json['livingAreaMax'],
    buildingFloorCountMin: !exists(json, 'buildingFloorCountMin')
      ? undefined
      : json['buildingFloorCountMin'],
    buildingFloorCountMax: !exists(json, 'buildingFloorCountMax')
      ? undefined
      : json['buildingFloorCountMax'],
    floorNumberMin: !exists(json, 'floorNumberMin') ? undefined : json['floorNumberMin'],
    floorNumberMax: !exists(json, 'floorNumberMax') ? undefined : json['floorNumberMax'],
    buildingCeilingHeight: !exists(json, 'buildingCeilingHeight')
      ? undefined
      : json['buildingCeilingHeight'],
    housingTypes: !exists(json, 'housingTypes') ? undefined : json['housingTypes'],
    saleTypes: !exists(json, 'saleTypes') ? undefined : json['saleTypes'],
    decorationTypes: !exists(json, 'decorationTypes') ? undefined : json['decorationTypes'],
    buildingTypes: !exists(json, 'buildingTypes') ? undefined : json['buildingTypes'],
    windowViewTypes: !exists(json, 'windowViewTypes') ? undefined : json['windowViewTypes'],
    buildingParkingTypes: !exists(json, 'buildingParkingTypes')
      ? undefined
      : json['buildingParkingTypes'],
    wcsType: !exists(json, 'wcsType') ? undefined : json['wcsType'],
    elevatorType: !exists(json, 'elevatorType') ? undefined : json['elevatorType'],
    balconyType: !exists(json, 'balconyType') ? undefined : json['balconyType'],
    buildingGarbageChute: !exists(json, 'buildingGarbageChute')
      ? undefined
      : json['buildingGarbageChute'],
    apartments: !exists(json, 'apartments') ? undefined : json['apartments'],
    loanRateMin: !exists(json, 'loanRateMin') ? undefined : json['loanRateMin'],
    loanRateMax: !exists(json, 'loanRateMax') ? undefined : json['loanRateMax'],
    boundingBox: !exists(json, 'boundingBox')
      ? undefined
      : ApartmentsFiltersBoundingBoxFromJSON(json['boundingBox']),
    page: !exists(json, 'page') ? undefined : json['page'],
    sortBy: !exists(json, 'sortBy') ? undefined : SortByFromJSON(json['sortBy']),
    sortOrder: !exists(json, 'sortOrder') ? undefined : SortOrderFromJSON(json['sortOrder']),
  }
}

export function ApartmentsFilterToJSON(value?: ApartmentsFilter | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    address: value.address,
    city: value.city,
    toponym:
      value.toponym === undefined
        ? undefined
        : (value.toponym as Array<any>).map(ApartmentsFiltersToponymToJSON),
    roominess: value.roominess,
    priceRubMin: value.priceRubMin,
    priceRubMax: value.priceRubMax,
    fullAreaMin: value.fullAreaMin,
    fullAreaMax: value.fullAreaMax,
    kitchensAreaMin: value.kitchensAreaMin,
    kitchensAreaMax: value.kitchensAreaMax,
    livingAreaMin: value.livingAreaMin,
    livingAreaMax: value.livingAreaMax,
    buildingFloorCountMin: value.buildingFloorCountMin,
    buildingFloorCountMax: value.buildingFloorCountMax,
    floorNumberMin: value.floorNumberMin,
    floorNumberMax: value.floorNumberMax,
    buildingCeilingHeight: value.buildingCeilingHeight,
    housingTypes: value.housingTypes,
    saleTypes: value.saleTypes,
    decorationTypes: value.decorationTypes,
    buildingTypes: value.buildingTypes,
    windowViewTypes: value.windowViewTypes,
    buildingParkingTypes: value.buildingParkingTypes,
    wcsType: value.wcsType,
    elevatorType: value.elevatorType,
    balconyType: value.balconyType,
    buildingGarbageChute: value.buildingGarbageChute,
    apartments: value.apartments,
    loanRateMin: value.loanRateMin,
    loanRateMax: value.loanRateMax,
    boundingBox: ApartmentsFiltersBoundingBoxToJSON(value.boundingBox),
    page: value.page,
    sortBy: SortByToJSON(value.sortBy),
    sortOrder: SortOrderToJSON(value.sortOrder),
  }
}
