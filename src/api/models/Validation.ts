/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  ValidationField,
  ValidationFieldFromJSON,
  ValidationFieldFromJSONTyped,
  ValidationFieldToJSON,
  ValidationNumber,
  ValidationNumberFromJSON,
  ValidationNumberFromJSONTyped,
  ValidationNumberToJSON,
  ValidationString,
  ValidationStringFromJSON,
  ValidationStringFromJSONTyped,
  ValidationStringToJSON,
  ValidationStringOrNumber,
  ValidationStringOrNumberFromJSON,
  ValidationStringOrNumberFromJSONTyped,
  ValidationStringOrNumberToJSON,
} from './'

/**
 *
 * @export
 * @interface Validation
 */
export interface Validation {
  /**
   *
   * @type {string}
   * @memberof Validation
   */
  required?: string
  /**
   *
   * @type {ValidationString}
   * @memberof Validation
   */
  pattern?: ValidationString
  /**
   *
   * @type {ValidationNumber}
   * @memberof Validation
   */
  minLength?: ValidationNumber
  /**
   *
   * @type {ValidationNumber}
   * @memberof Validation
   */
  maxLength?: ValidationNumber
  /**
   *
   * @type {ValidationStringOrNumber}
   * @memberof Validation
   */
  equalTo?: ValidationStringOrNumber
  /**
   *
   * @type {ValidationStringOrNumber}
   * @memberof Validation
   */
  notEqualTo?: ValidationStringOrNumber
  /**
   *
   * @type {ValidationNumber}
   * @memberof Validation
   */
  greaterThan?: ValidationNumber
  /**
   *
   * @type {ValidationNumber}
   * @memberof Validation
   */
  greaterThanOrEqual?: ValidationNumber
  /**
   *
   * @type {ValidationNumber}
   * @memberof Validation
   */
  lessThan?: ValidationNumber
  /**
   *
   * @type {ValidationNumber}
   * @memberof Validation
   */
  lessThanOrEqual?: ValidationNumber
  /**
   *
   * @type {ValidationField}
   * @memberof Validation
   */
  equalToField?: ValidationField
  /**
   *
   * @type {ValidationField}
   * @memberof Validation
   */
  notEqualToField?: ValidationField
  /**
   *
   * @type {ValidationField}
   * @memberof Validation
   */
  greaterThanField?: ValidationField
  /**
   *
   * @type {ValidationField}
   * @memberof Validation
   */
  greaterOrEqualThanField?: ValidationField
  /**
   *
   * @type {ValidationField}
   * @memberof Validation
   */
  lessThanField?: ValidationField
  /**
   *
   * @type {ValidationField}
   * @memberof Validation
   */
  lessThanOrEqualToField?: ValidationField
}

export function ValidationFromJSON(json: any): Validation {
  return ValidationFromJSONTyped(json, false)
}

export function ValidationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Validation {
  if (json === undefined || json === null) {
    return json
  }
  return {
    required: !exists(json, 'required') ? undefined : json['required'],
    pattern: !exists(json, 'pattern') ? undefined : ValidationStringFromJSON(json['pattern']),
    minLength: !exists(json, 'minLength')
      ? undefined
      : ValidationNumberFromJSON(json['minLength']),
    maxLength: !exists(json, 'maxLength')
      ? undefined
      : ValidationNumberFromJSON(json['maxLength']),
    equalTo: !exists(json, 'equalTo')
      ? undefined
      : ValidationStringOrNumberFromJSON(json['equalTo']),
    notEqualTo: !exists(json, 'notEqualTo')
      ? undefined
      : ValidationStringOrNumberFromJSON(json['notEqualTo']),
    greaterThan: !exists(json, 'greaterThan')
      ? undefined
      : ValidationNumberFromJSON(json['greaterThan']),
    greaterThanOrEqual: !exists(json, 'greaterThanOrEqual')
      ? undefined
      : ValidationNumberFromJSON(json['greaterThanOrEqual']),
    lessThan: !exists(json, 'lessThan') ? undefined : ValidationNumberFromJSON(json['lessThan']),
    lessThanOrEqual: !exists(json, 'lessThanOrEqual')
      ? undefined
      : ValidationNumberFromJSON(json['lessThanOrEqual']),
    equalToField: !exists(json, 'equalToField')
      ? undefined
      : ValidationFieldFromJSON(json['equalToField']),
    notEqualToField: !exists(json, 'notEqualToField')
      ? undefined
      : ValidationFieldFromJSON(json['notEqualToField']),
    greaterThanField: !exists(json, 'greaterThanField')
      ? undefined
      : ValidationFieldFromJSON(json['greaterThanField']),
    greaterOrEqualThanField: !exists(json, 'greaterOrEqualThanField')
      ? undefined
      : ValidationFieldFromJSON(json['greaterOrEqualThanField']),
    lessThanField: !exists(json, 'lessThanField')
      ? undefined
      : ValidationFieldFromJSON(json['lessThanField']),
    lessThanOrEqualToField: !exists(json, 'lessThanOrEqualToField')
      ? undefined
      : ValidationFieldFromJSON(json['lessThanOrEqualToField']),
  }
}

export function ValidationToJSON(value?: Validation | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    required: value.required,
    pattern: ValidationStringToJSON(value.pattern),
    minLength: ValidationNumberToJSON(value.minLength),
    maxLength: ValidationNumberToJSON(value.maxLength),
    equalTo: ValidationStringOrNumberToJSON(value.equalTo),
    notEqualTo: ValidationStringOrNumberToJSON(value.notEqualTo),
    greaterThan: ValidationNumberToJSON(value.greaterThan),
    greaterThanOrEqual: ValidationNumberToJSON(value.greaterThanOrEqual),
    lessThan: ValidationNumberToJSON(value.lessThan),
    lessThanOrEqual: ValidationNumberToJSON(value.lessThanOrEqual),
    equalToField: ValidationFieldToJSON(value.equalToField),
    notEqualToField: ValidationFieldToJSON(value.notEqualToField),
    greaterThanField: ValidationFieldToJSON(value.greaterThanField),
    greaterOrEqualThanField: ValidationFieldToJSON(value.greaterOrEqualThanField),
    lessThanField: ValidationFieldToJSON(value.lessThanField),
    lessThanOrEqualToField: ValidationFieldToJSON(value.lessThanOrEqualToField),
  }
}
