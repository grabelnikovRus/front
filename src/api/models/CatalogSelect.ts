/* tslint:disable */
/* eslint-disable */
/**
 * SITE API
 * API сайта ПИК Брокер
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
  CatalogSelectOptions,
  CatalogSelectOptionsFromJSON,
  CatalogSelectOptionsFromJSONTyped,
  CatalogSelectOptionsToJSON,
  ValidationMessages,
  ValidationMessagesFromJSON,
  ValidationMessagesFromJSONTyped,
  ValidationMessagesToJSON,
} from './'

/**
 *
 * @export
 * @interface CatalogSelect
 */
export interface CatalogSelect {
  /**
   *
   * @type {string}
   * @memberof CatalogSelect
   */
  title?: string
  /**
   *
   * @type {string}
   * @memberof CatalogSelect
   */
  type?: CatalogSelectTypeEnum
  /**
   *
   * @type {boolean}
   * @memberof CatalogSelect
   */
  required?: boolean
  /**
   *
   * @type {boolean}
   * @memberof CatalogSelect
   */
  multiple?: boolean
  /**
   *
   * @type {Array<string>}
   * @memberof CatalogSelect
   */
  _default?: Array<string> | null
  /**
   *
   * @type {Array<CatalogSelectOptions>}
   * @memberof CatalogSelect
   */
  options?: Array<CatalogSelectOptions>
  /**
   *
   * @type {ValidationMessages}
   * @memberof CatalogSelect
   */
  messages?: ValidationMessages
}

/**
 * @export
 * @enum {string}
 */
export enum CatalogSelectTypeEnum {
  Radio = 'radio',
  Checkbox = 'checkbox',
  Select = 'select',
}

export function CatalogSelectFromJSON(json: any): CatalogSelect {
  return CatalogSelectFromJSONTyped(json, false)
}

export function CatalogSelectFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CatalogSelect {
  if (json === undefined || json === null) {
    return json
  }
  return {
    title: !exists(json, 'title') ? undefined : json['title'],
    type: !exists(json, 'type') ? undefined : json['type'],
    required: !exists(json, 'required') ? undefined : json['required'],
    multiple: !exists(json, 'multiple') ? undefined : json['multiple'],
    _default: !exists(json, 'default') ? undefined : json['default'],
    options: !exists(json, 'options')
      ? undefined
      : (json['options'] as Array<any>).map(CatalogSelectOptionsFromJSON),
    messages: !exists(json, 'messages')
      ? undefined
      : ValidationMessagesFromJSON(json['messages']),
  }
}

export function CatalogSelectToJSON(value?: CatalogSelect | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    title: value.title,
    type: value.type,
    required: value.required,
    multiple: value.multiple,
    default: value._default,
    options:
      value.options === undefined
        ? undefined
        : (value.options as Array<any>).map(CatalogSelectOptionsToJSON),
    messages: ValidationMessagesToJSON(value.messages),
  }
}
